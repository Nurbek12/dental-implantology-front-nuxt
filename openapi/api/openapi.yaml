openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
  /auth/login:
    post:
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthEntity'
      tags:
        - auth
  /auth/logout:
    post:
      operationId: AuthController_logout
      parameters: []
      responses:
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - auth
  /auth/refresh:
    post:
      operationId: AuthController_refresh
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthEntity'
      tags:
        - auth
  /users/me:
    get:
      operationId: UsersController_findMe
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - users
    patch:
      operationId: UsersController_updateMe
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDoctorDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - users
  /users/me/change-password:
    patch:
      operationId: UsersController_updatePassword
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - users
  /users/me/change-avatar:
    patch:
      operationId: UsersController_updateAvatarV2
      parameters: []
      responses:
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - users
  /users:
    post:
      operationId: UsersController_createDoctor
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDoctorDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - users
    get:
      operationId: UsersController_findAll
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - users
  /users/published-doctors:
    get:
      operationId: UsersController_findPublishedDoctors
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
      tags:
        - users
  /users/{id}:
    get:
      operationId: UsersController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - users
    patch:
      operationId: UsersController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - users
    delete:
      operationId: UsersController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - users
  /procedures:
    post:
      operationId: ProceduresController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProcedureDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcedureEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - procedures
      security:
        - bearer: []
    get:
      operationId: ProceduresController_findAll
      parameters:
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          schema:
            type: number
        - name: byId
          required: false
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProcedureEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - procedures
      security:
        - bearer: []
  /procedures/{id}:
    get:
      operationId: ProceduresController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcedureEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - procedures
      security:
        - bearer: []
    patch:
      operationId: ProceduresController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProcedureDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcedureEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - procedures
      security:
        - bearer: []
    delete:
      operationId: ProceduresController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcedureEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - procedures
      security:
        - bearer: []
  /services:
    post:
      operationId: ServicesController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServiceDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - services
      security:
        - bearer: []
    get:
      operationId: ServicesController_findAll
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - services
      security:
        - bearer: []
  /services/{id}:
    get:
      operationId: ServicesController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - services
      security:
        - bearer: []
    patch:
      operationId: ServicesController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateServiceDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - services
      security:
        - bearer: []
    delete:
      operationId: ServicesController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - services
      security:
        - bearer: []
  /patients:
    post:
      operationId: PatientsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePatientDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - patients
      security:
        - bearer: []
    get:
      operationId: PatientsController_findAll
      parameters:
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          schema:
            type: number
        - name: gender
          required: false
          in: query
          schema:
            type: string
        - name: birthDate
          required: false
          in: query
          schema:
            format: date-time
            type: string
        - name: createdUserId
          required: false
          in: query
          schema:
            type: number
        - name: createdDate
          required: false
          in: query
          schema:
            format: date-time
            type: string
        - name: byId
          required: false
          in: query
          schema:
            type: string
        - name: byGender
          required: false
          in: query
          schema:
            type: string
        - name: byAge
          required: false
          in: query
          schema:
            type: string
        - name: byCreatedDate
          required: false
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPatientEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - patients
      security:
        - bearer: []
  /patients/{id}:
    get:
      operationId: PatientsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
        - name: expand
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - patients
      security:
        - bearer: []
    patch:
      operationId: PatientsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePatientDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - patients
      security:
        - bearer: []
    delete:
      operationId: PatientsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - patients
      security:
        - bearer: []
  /patients/{id}/change-avatar:
    patch:
      operationId: PatientsController_updateAvatarV2
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - patients
      security:
        - bearer: []
  /appointments/mine:
    post:
      operationId: AppointmentsController_createMine
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMyAppointmentDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Only users with Doctor permissions can perform this
            action.
      tags:
        - appointments
      security:
        - bearer: []
  /appointments/mine/{id}:
    get:
      operationId: AppointmentsController_findMineOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Only users with Doctor permissions can perform this
            action.
      tags:
        - appointments
      security:
        - bearer: []
    patch:
      operationId: AppointmentsController_updateMine
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMyAppointmentDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Only users with Doctor permissions can perform this
            action.
      tags:
        - appointments
      security:
        - bearer: []
    delete:
      operationId: AppointmentsController_removeMine
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Only users with Doctor permissions can perform this
            action.
      tags:
        - appointments
      security:
        - bearer: []
  /appointments:
    post:
      operationId: AppointmentsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAppointmentDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - appointments
      security:
        - bearer: []
    get:
      operationId: AppointmentsController_findAll
      parameters:
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          schema:
            type: number
        - name: groupBy
          required: false
          in: query
          schema:
            type: string
        - name: doctorId
          required: true
          in: query
          schema:
            type: number
        - name: startDate
          required: false
          in: query
          schema:
            format: date-time
            type: string
        - name: endDate
          required: false
          in: query
          schema:
            format: date-time
            type: string
        - name: byId
          required: false
          in: query
          schema:
            type: string
        - name: byCreatedDate
          required: false
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppointmentEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - appointments
      security:
        - bearer: []
  /appointments/{id}:
    get:
      operationId: AppointmentsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - appointments
      security:
        - bearer: []
    patch:
      operationId: AppointmentsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAppointmentDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - appointments
      security:
        - bearer: []
    delete:
      operationId: AppointmentsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - appointments
      security:
        - bearer: []
  /teeth:
    get:
      operationId: TeethController_findAll
      parameters:
        - name: num
          required: false
          in: query
          schema:
            type: number
        - name: patientId
          required: false
          in: query
          schema:
            type: number
        - name: byId
          required: false
          in: query
          schema:
            type: string
        - name: byNum
          required: false
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToothEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - teeth
  /teeth/{id}:
    get:
      operationId: TeethController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToothEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - teeth
    patch:
      operationId: TeethController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateToothDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToothEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Only users with Doctor permissions can perform this
            action.
      tags:
        - teeth
  /examinations:
    post:
      operationId: ExaminationsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExaminationDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExaminationEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Only users with Doctor permissions can perform this
            action.
      tags:
        - examinations
      security:
        - bearer: []
    get:
      operationId: ExaminationsController_findAll
      parameters:
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          schema:
            type: number
        - name: byId
          required: false
          in: query
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExaminationEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - examinations
      security:
        - bearer: []
  /examinations/{id}:
    get:
      operationId: ExaminationsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExaminationEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - examinations
      security:
        - bearer: []
    patch:
      operationId: ExaminationsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateExaminationDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExaminationEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Only users with Doctor permissions can perform this
            action.
      tags:
        - examinations
      security:
        - bearer: []
    delete:
      operationId: ExaminationsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExaminationEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Only users with Doctor permissions can perform this
            action.
      tags:
        - examinations
      security:
        - bearer: []
  /initial-examinations:
    post:
      operationId: InitialExaminationsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInitialExaminationDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitialExaminationEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Only users with Doctor permissions can perform this
            action.
      tags:
        - initial-examinations
      security:
        - bearer: []
  /initial-examinations/{id}:
    get:
      operationId: InitialExaminationsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitialExaminationEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - initial-examinations
      security:
        - bearer: []
    patch:
      operationId: InitialExaminationsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInitialExaminationDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitialExaminationEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Only users with Doctor permissions can perform this
            action.
      tags:
        - initial-examinations
      security:
        - bearer: []
  /treatments/{id}:
    get:
      operationId: TreatmentsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreatmentEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Only users with Doctor permissions can perform this
            action.
      tags:
        - treatments
    patch:
      operationId: TreatmentsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTreatmentDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreatmentEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Only users with Doctor permissions can perform this
            action.
      tags:
        - treatments
  /initial-records:
    post:
      operationId: InitialRecordsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInitialRecordDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitialRecordEntity'
      tags:
        - initial-records
    get:
      operationId: InitialRecordsController_findAll
      parameters:
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          schema:
            type: number
        - name: byId
          required: false
          in: query
          schema:
            type: string
        - name: byFirstName
          required: false
          in: query
          schema:
            type: string
        - name: byLastName
          required: false
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInitialRecordEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - initial-records
  /initial-records/{id}:
    get:
      operationId: InitialRecordsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitialRecordEntity'
      tags:
        - initial-records
    patch:
      operationId: InitialRecordsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInitialExaminationDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitialRecordEntity'
      tags:
        - initial-records
    delete:
      operationId: InitialRecordsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitialRecordEntity'
      tags:
        - initial-records
  /payments:
    post:
      operationId: PaymentsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentEntity'
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - payments
      security:
        - bearer: []
    get:
      operationId: PaymentsController_findAll
      parameters:
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          schema:
            type: number
        - name: type
          required: false
          in: query
          schema:
            type: string
        - name: doctorId
          required: false
          in: query
          schema:
            type: number
        - name: patientId
          required: false
          in: query
          schema:
            type: number
        - name: createdDate
          required: false
          in: query
          schema:
            format: date-time
            type: string
        - name: byId
          required: false
          in: query
          schema:
            type: string
        - name: byPatientId
          required: false
          in: query
          schema:
            type: string
        - name: byDoctorId
          required: false
          in: query
          schema:
            type: string
        - name: byCreatedDate
          required: false
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPaymentEntity'
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - payments
      security:
        - bearer: []
  /payments/{id}:
    get:
      operationId: PaymentsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '401':
          description: 'Access denied: User is not authenticated. Please log in to continue.'
      tags:
        - payments
      security:
        - bearer: []
    patch:
      operationId: PaymentsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePaymentDto'
      responses:
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - payments
      security:
        - bearer: []
    delete:
      operationId: PaymentsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '401':
          description: >-
            Access denied: User is not authenticated. Please log in to access
            this resource.
        '403':
          description: >-
            Access denied: Insufficient permissions. Admin privileges are
            required to perform this action.
      tags:
        - payments
      security:
        - bearer: []
info:
  title: dr-ikramov
  description: The dr-ikramov API description
  version: '0.1'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    AuthDto:
      type: object
      properties:
        phone:
          type: string
        password:
          type: string
      required:
        - phone
        - password
    AuthEntity:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        userId:
          type: number
        userRole:
          type: string
      required:
        - accessToken
        - refreshToken
        - userId
        - userRole
    i:
      type: object
      properties: {}
    UserEntity:
      type: object
      properties:
        id:
          type: number
        phone:
          type: string
        refreshToken:
          type: string
          nullable: false
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
          nullable: true
        avatar:
          type: string
        email:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        birthDate:
          format: date-time
          type: string
        balance:
          type: number
        specialties:
          type: array
          items:
            type: string
        experience:
          type: number
          nullable: true
        content:
          type: string
          nullable: true
        rating:
          $ref: '#/components/schemas/i'
        isPublished:
          type: boolean
        role:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - id
        - phone
        - firstName
        - lastName
        - avatar
        - birthDate
        - balance
        - specialties
        - rating
        - isPublished
        - role
        - createdAt
        - updatedAt
    UpdateDoctorDto:
      type: object
      properties:
        phone:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        email:
          type: string
        address:
          type: string
        birthDate:
          format: date-time
          type: string
        specialties:
          type: array
          items:
            type: string
        experience:
          type: number
        content:
          type: string
        isPublished:
          type: boolean
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
        confirmPassword:
          type: string
      required:
        - oldPassword
        - newPassword
        - confirmPassword
    CreateDoctorDto:
      type: object
      properties:
        phone:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        email:
          type: string
        address:
          type: string
        birthDate:
          format: date-time
          type: string
        specialties:
          type: array
          items:
            type: string
        experience:
          type: number
        content:
          type: string
        isPublished:
          type: boolean
      required:
        - phone
        - firstName
        - lastName
        - birthDate
    UpdateUserDto:
      type: object
      properties:
        phone:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        email:
          type: string
        address:
          type: string
        birthDate:
          format: date-time
          type: string
        specialties:
          type: array
          items:
            type: string
        experience:
          type: number
        content:
          type: string
        rating:
          type: number
        isPublished:
          type: boolean
        role:
          type: string
    CreateProcedureDto:
      type: object
      properties:
        code:
          type: string
        title_en:
          type: string
        title_ru:
          type: string
        title_uz:
          type: string
        description_en:
          type: string
          nullable: true
        description_ru:
          type: string
          nullable: true
        description_uz:
          type: string
          nullable: true
        serviceId:
          type: number
        price:
          type: number
        kpi:
          type: number
      required:
        - title_en
        - title_ru
        - title_uz
        - serviceId
    ProcedureEntity:
      type: object
      properties:
        id:
          type: number
        code:
          type: string
          nullable: true
        title_en:
          type: string
        title_ru:
          type: string
          nullable: true
        title_uz:
          type: string
          nullable: false
        description_en:
          type: string
          nullable: true
        description_ru:
          type: string
          nullable: true
        description_uz:
          type: string
          nullable: true
        serviceId:
          type: number
        price:
          type: number
        kpi:
          type: number
      required:
        - id
        - title_en
        - serviceId
    MetaDateEntity:
      type: object
      properties:
        total:
          type: number
          example: 50
        lastPage:
          type: number
          example: 5
        currentPage:
          type: number
          example: 1
        perPage:
          type: number
          example: 10
        prev:
          type: number
          example: null
        next:
          type: number
          example: 2
      required:
        - total
        - lastPage
        - currentPage
        - perPage
        - prev
        - next
    PaginatedProcedureEntity:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProcedureEntity'
        meta:
          $ref: '#/components/schemas/MetaDateEntity'
      required:
        - data
        - meta
    UpdateProcedureDto:
      type: object
      properties:
        code:
          type: string
        title_en:
          type: string
        title_ru:
          type: string
        title_uz:
          type: string
        description_en:
          type: string
          nullable: true
        description_ru:
          type: string
          nullable: true
        description_uz:
          type: string
          nullable: true
        serviceId:
          type: number
        price:
          type: number
        kpi:
          type: number
    CreateServiceDto:
      type: object
      properties: {}
    ServiceEntity:
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        description:
          type: string
          nullable: true
        isPublic:
          type: boolean
        procedures:
          description: List of related procedures
          type: array
          items:
            $ref: '#/components/schemas/ProcedureEntity'
      required:
        - id
        - title
        - procedures
    UpdateServiceDto:
      type: object
      properties: {}
    CreatePatientDto:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        phone:
          type: string
        additionalPhone:
          type: string
        email:
          type: string
        birthDate:
          format: date-time
          type: string
        gender:
          type: string
          default: MALE
        address:
          type: string
        additionalInformation:
          type: object
      required:
        - firstName
        - lastName
        - phone
        - birthDate
    PatientEntity:
      type: object
      properties:
        id:
          type: number
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
          nullable: true
        phone:
          type: string
        additionalPhone:
          type: string
          nullable: true
        avatar:
          type: string
        email:
          type: string
          nullable: true
        birthDate:
          format: date-time
          type: string
        gender:
          type: string
        age:
          type: number
        address:
          type: string
          nullable: true
        balance:
          type: number
        additionalInformation:
          type: object
          nullable: true
        userId:
          type: number
        createdUser:
          $ref: '#/components/schemas/UserEntity'
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - id
        - firstName
        - lastName
        - phone
        - avatar
        - birthDate
        - gender
        - age
        - balance
        - userId
        - createdUser
        - createdAt
        - updatedAt
    PaginatedPatientEntity:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PatientEntity'
        meta:
          $ref: '#/components/schemas/MetaDateEntity'
      required:
        - data
        - meta
    UpdatePatientDto:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        phone:
          type: string
        additionalPhone:
          type: string
        email:
          type: string
        birthDate:
          format: date-time
          type: string
        gender:
          type: string
          default: MALE
        address:
          type: string
        additionalInformation:
          type: object
    CreateMyAppointmentDto:
      type: object
      properties:
        patientId:
          type: number
        procedureId:
          type: number
        startDate:
          format: date-time
          type: string
        endDate:
          format: date-time
          type: string
        description:
          type: string
      required:
        - patientId
        - procedureId
        - startDate
    AppointmentEntity:
      type: object
      properties:
        id:
          type: number
        patientId:
          type: number
        patient:
          $ref: '#/components/schemas/PatientEntity'
        doctorId:
          type: number
        doctor:
          $ref: '#/components/schemas/UserEntity'
        procedureId:
          type: number
        startDate:
          format: date-time
          type: string
        endDate:
          format: date-time
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - id
        - patientId
        - patient
        - doctorId
        - doctor
        - procedureId
        - startDate
        - createdAt
        - updatedAt
    UpdateMyAppointmentDto:
      type: object
      properties:
        patientId:
          type: number
        procedureId:
          type: number
        startDate:
          format: date-time
          type: string
        endDate:
          format: date-time
          type: string
        description:
          type: string
    CreateAppointmentDto:
      type: object
      properties:
        patientId:
          type: number
        doctorId:
          type: number
        procedureId:
          type: number
        startDate:
          format: date-time
          type: string
        endDate:
          format: date-time
          type: string
        description:
          type: string
      required:
        - patientId
        - doctorId
        - procedureId
        - startDate
    UpdateAppointmentDto:
      type: object
      properties:
        patientId:
          type: number
        doctorId:
          type: number
        procedureId:
          type: number
        startDate:
          format: date-time
          type: string
        endDate:
          format: date-time
          type: string
        description:
          type: string
    ToothEntity:
      type: object
      properties:
        id:
          type: number
        num:
          type: number
        condition:
          type: array
          items:
            type: string
        patientId:
          type: number
        patient:
          $ref: '#/components/schemas/PatientEntity'
        images:
          type: array
          items:
            type: string
      required:
        - id
        - num
        - patientId
        - patient
        - images
    UpdateToothDto:
      type: object
      properties:
        num:
          type: number
    CreateExaminationDto:
      type: object
      properties:
        patientId:
          type: number
        toothNum:
          type: number
        toothCondition:
          type: array
          items:
            type: string
        treatments:
          example: '[{ procedureId: number, isCompleted: boolean, price: number }]'
          type: array
          items:
            type: string
      required:
        - patientId
        - toothNum
    TreatmentEntity:
      type: object
      properties:
        id:
          type: number
        procedureId:
          type: number
        procedure:
          $ref: '#/components/schemas/ProcedureEntity'
        isCompleted:
          type: boolean
        completedAt:
          format: date-time
          type: string
        examinationId:
          type: number
        price:
          type: number
        isPaid:
          type: boolean
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - id
        - procedureId
        - procedure
        - isCompleted
        - completedAt
        - examinationId
        - price
        - isPaid
        - createdAt
        - updatedAt
    ExaminationEntity:
      type: object
      properties:
        id:
          type: number
        toothId:
          type: number
        tooth:
          $ref: '#/components/schemas/ToothEntity'
        userId:
          type: number
        createdUser:
          $ref: '#/components/schemas/UserEntity'
        toothCondition:
          type: array
          items:
            type: string
        isPaid:
          type: boolean
          nullable: true
        isInitial:
          type: boolean
        initialExaminationId:
          type: number
          nullable: true
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        treatments:
          type: array
          items:
            $ref: '#/components/schemas/TreatmentEntity'
      required:
        - id
        - toothId
        - tooth
        - userId
        - createdUser
    PaginatedExaminationEntity:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ExaminationEntity'
        meta:
          $ref: '#/components/schemas/MetaDateEntity'
      required:
        - data
        - meta
    UpdateExaminationDto:
      type: object
      properties:
        patientId:
          type: number
        toothNum:
          type: number
        toothCondition:
          type: array
          items:
            type: string
        treatments:
          example: '[{ procedureId: number, isCompleted: boolean, price: number }]'
          type: array
          items:
            type: string
    CreateInitialExaminationDto:
      type: object
      properties:
        patientId:
          type: number
        toothExaminations:
          example: '[{ toothNum: number, toothCodition: [] }]'
          type: array
          items:
            type: string
        biteType:
          type: string
        indexGreenVermillion:
          type: number
        indexFedorovVolodkin:
          type: number
        objectiveExamData:
          type: string
        oralMucosaCondition:
          type: string
          nullable: true
        xRayLabaratoryData:
          type: string
          nullable: true
      required:
        - patientId
        - toothExaminations
        - indexGreenVermillion
    ToothExaminationEntity:
      type: object
      properties:
        id:
          type: number
        toothId:
          type: number
        toothCondition:
          type: array
          items:
            type: string
        userId:
          type: number
        isPaid:
          type: boolean
          nullable: true
        isInitial:
          type: boolean
        initialExaminationId:
          type: number
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        tooth:
          type: object
      required:
        - id
        - toothId
        - toothCondition
        - userId
        - isPaid
        - isInitial
        - initialExaminationId
        - createdAt
        - updatedAt
        - tooth
    InitialExaminationEntity:
      type: object
      properties:
        id:
          type: number
        patientId:
          type: number
        biteType:
          type: string
          nullable: true
        indexGreenVermillion:
          $ref: '#/components/schemas/i'
        indexFedorovVolodkin:
          $ref: '#/components/schemas/i'
        objectiveExamData:
          type: string
          nullable: true
        oralMucosaCondition:
          type: string
          nullable: true
        xRayLabaratoryData:
          type: string
          nullable: true
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        toothExaminations:
          type: array
          items:
            $ref: '#/components/schemas/ToothExaminationEntity'
      required:
        - id
        - patientId
        - toothExaminations
    UpdateInitialExaminationDto:
      type: object
      properties:
        patientId:
          type: number
        toothExaminations:
          example: '[{ toothNum: number, toothCodition: [] }]'
          type: array
          items:
            type: string
        biteType:
          type: string
        indexGreenVermillion:
          type: number
        indexFedorovVolodkin:
          type: number
        objectiveExamData:
          type: string
        oralMucosaCondition:
          type: string
          nullable: true
        xRayLabaratoryData:
          type: string
          nullable: true
    UpdateTreatmentDto:
      type: object
      properties: {}
    CreateInitialRecordDto:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        notes:
          type: string
      required:
        - firstName
        - lastName
        - phone
    InitialRecordEntity:
      type: object
      properties:
        id:
          type: number
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        notes:
          type: string
          nullable: true
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - id
        - firstName
        - lastName
        - phone
    PaginatedInitialRecordEntity:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/InitialRecordEntity'
        meta:
          $ref: '#/components/schemas/MetaDateEntity'
      required:
        - data
        - meta
    CreatePaymentDto:
      type: object
      properties:
        examinationId:
          type: number
        amount:
          type: number
        type:
          type: string
      required:
        - examinationId
        - amount
        - type
    PaymentEntity:
      type: object
      properties:
        id:
          type: number
        examinationId:
          type: number
        examination:
          $ref: '#/components/schemas/ExaminationEntity'
        type:
          type: string
        amount:
          type: number
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - id
        - examinationId
        - examination
        - type
        - amount
    PaginatedPaymentEntity:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PaymentEntity'
        meta:
          $ref: '#/components/schemas/MetaDateEntity'
      required:
        - data
        - meta
    UpdatePaymentDto:
      type: object
      properties:
        examinationId:
          type: number
        amount:
          type: number
        type:
          type: string
